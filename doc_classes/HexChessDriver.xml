<?xml version="1.0" encoding="UTF-8" ?>
<class name="HexChessDriver" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="ClearSelection">
			<return type="void" />
			<description>
                {Clears the selected piece.
                 Usage:
                  1 - GetSelectableTiles() // get a list of selectable tiles
                  2 - GetMoveTiles()       // get the list of valid moves from selected tile
                  3 - ClearSelection()     // player wants to make a different selection
                  4 - GetSelectableTiles() // show the list of selectable tiles again
                  5 - GetMoveTiles()       // get the list of valid moves from the new selected tile
                  6 - MovePiece()          // commit to a move}
			</description>
		</method>
		<method name="GetActionOnTile">
			<return type="int" />
			<param index="0" name="rank" type="int" />
			<param index="1" name="file" type="int" />
			<description>
                {
Returns the avalible action type for a given location 
     
Data is encoded as an int where:
     0 no action
     1 selectable piece
     2 move
     3 move & selectable piece
                }
			</description>
		</method>
		<method name="GetMoveTiles">
			<return type="void" />
			<param index="0" name="rank" type="int" />
			<param index="1" name="file" type="int" />
			<description>
Given the location of a selected piece, updates all valid moves to an internal variable that can be accessed with GetActionOnTile.
			</description>
		</method>
		<method name="GetPieceOnTile">
			<return type="int" />
			<param index="0" name="rank" type="int" />
			<param index="1" name="file" type="int" />
			<description>
Returns the piece type and player on the given location 

Data is encoded as an int where:
     0 no piece     
     1 white king   
     2 white queen  
     3 white rook   
     4 white bishop 
     5 white knight 
     6 white pawn   
     7 black king   
     8 black queen  
     9 black rook   
    10 black bishop 
    11 black knight 
    12 black pawn   
    13 - not used   
    14 - not used   
    15 - not used
			</description>
		</method>
		<method name="GetSelectableTiles">
			<return type="void" />
			<description>
Updates all valid selections to an internal variable that can be accessed with GetActionOnTile, a valid selection is a tile containing a piece with valid moves
			</description>
		</method>
		<method name="GetGameState">
			<return type="int" />
			<description>
Return value is the game over state:
Running = -1,
Checkmate = 0,
Stalemate = 1,
DeadPosistion = 2,
ThreefoldRepitition = 3,
FiftyMoveRule = 4
			</description>
		</method>
		<method name="MovePiece">
			<return type="void" />
			<param index="0" name="rank" type="int" />
			<param index="1" name="file" type="int" />
			<description>
Moves the currently selected piece to the given location.

Must follow immediately after GetMoveTiles since it requires the selected piece to be updated.
			</description>
		</method>
		<method name="RoundCleanup">
			<return type="void" />
			<description>
Post move cleanup before the next round can be setup.
This includes updating if a pawn moved this round or if there was a capture.

Should be run immediately after the player makes a move
			</description>
		</method>
		<method name="RoundSetup">
			<return type="void" />
			<description>
Setup Order:
- update round number
- update current player = round number % 2
- update en-passant | if piece is same player, clear
- get valid moves for all current player pieces and save/count results in pieces
- check for win/draw

Should be run before the player is allowed to select a piece
			</description>
		</method>
	</methods>
</class>
